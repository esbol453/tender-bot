import logging
import requests
from bs4 import BeautifulSoup
from html import escape
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime, timedelta

TOKEN = "7008967829:AAHIcif9vD-j1gxYPGbQ5X7UY-0s2W3dqnk"

# URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ì–æ—Å–∑–∞–∫—É–ø
GOSZAKUP_URL = (
    "https://goszakup.gov.kz/ru/search/lots?"
    "filter%5Bmethod%5D%5B%5D=3&"                 # –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    "filter%5Bstatus%5D%5B%5D=240&"                # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–ø—Ä–∏–µ–º —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
    "filter%5Bkato%5D=470000000&"                   # –ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
    "filter%5Bamount_to%5D=1000000"                 # –°—É–º–º–∞ –¥–æ 1 000 000 —Ç–≥
)

def parse_goszakup():
    tenders = []
    try:
        response = requests.get(GOSZAKUP_URL, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        rows = soup.select("table.table tbody tr")
        for row in rows:
            cols = row.find_all("td")
            if len(cols) < 6:
                continue

            title = cols[1].get_text(strip=True)
            description = cols[2].get_text(strip=True)
            quantity = cols[3].get_text(strip=True)
            price = cols[4].get_text(strip=True)
            method = cols[5].get_text(strip=True)
            status = cols[6].get_text(strip=True) if len(cols) > 6 else ""

            # –§–∏–ª—å—Ç—Ä, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–æ —Å–∞–π—Ç —É–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç
            if "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è" not in description and "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è" not in title:
                continue
            if "–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π" not in method:
                continue
            if "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" not in status:
                continue

            tenders.append({
                "title": title,
                "description": description,
                "quantity": quantity,
                "price": price,
                "status": status
            })

    except Exception as e:
        tenders.append({"title": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ì–æ—Å–∑–∞–∫—É–ø: {e}", "description": "", "quantity": "", "price": "", "status": ""})

    return tenders

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä—é –ì–æ—Å–∑–∞–∫—É–ø—ã –ø–æ –ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–æ–º—É —Ä–µ–≥–∏–æ–Ω—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/goszakup ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã"
    )

async def goszakup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tenders = parse_goszakup()

    if not tenders or (len(tenders) == 1 and "–û—à–∏–±–∫–∞" in tenders[0]["title"]):
        await context.bot.send_message(chat_id=chat_id, text="[–ì–æ—Å–∑–∞–∫—É–ø] –ù–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ—Ç.")
        return

    for t in tenders:
        msg = (
            f"üîπ <b>{escape(t['title'])}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {escape(t['description'])}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {escape(t['quantity'])}\n"
            f"–°—É–º–º–∞: {escape(t['price'])} —Ç–≥\n"
            f"–°—Ç–∞—Ç—É—Å: {escape(t['status'])}\n"
        )
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("goszakup", goszakup_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
