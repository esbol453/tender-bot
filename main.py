import logging
import requests
from bs4 import BeautifulSoup
from html import escape
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from datetime import datetime, timedelta

TOKEN = "7008967829:AAHIcif9vD-j1gxYPGbQ5X7UY-0s2W3dqnk"


# --- –ì–æ—Å–∑–∞–∫—É–ø ---
def parse_goszakup():
    url = "https://goszakup.gov.kz/ru/announcements"
    tenders = []
    try:
        response = requests.get(url, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")
        rows = soup.select("table.table tbody tr")[:20]
        for row in rows:
            cols = row.find_all("td")
            if len(cols) >= 7:
                title = cols[1].text.strip()
                description = cols[2].text.strip()
                quantity = cols[3].text.strip()
                price_text = cols[4].text.strip().replace(" ", "").replace("¬†", "")
                procedure = cols[5].text.strip()
                status = cols[6].text.strip()
                link = "https://goszakup.gov.kz" + cols[1].find("a")["href"]

                try:
                    price_value = float(price_text.replace("—Ç–≥", "").replace(",", ".").strip())
                except:
                    price_value = 0

                # --- DEBUG –≤—ã–≤–æ–¥ ---
                print("==== DEBUG ====")
                print(f"title: {title}")
                print(f"description: {description}")
                print(f"quantity: {quantity}")
                print(f"procedure: {procedure}")
                print(f"status: {status}")
                print(f"price_value: {price_value}")

                # –£—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞
                if (
                    "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è" in description
                    and "–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π" in procedure
                    and "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–ø—Ä–∏–µ–º —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)" in status
                    and price_value <= 1_000_000
                ):
                    tenders.append({
                        "title": title,
                        "description": description,
                        "quantity": quantity,
                        "price": price_text,
                        "status": status,
                        "url": link
                    })

    except Exception as e:
        tenders.append({"title": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ì–æ—Å–∑–∞–∫—É–ø: {e}", "description": "", "quantity": "", "price": "", "status": "", "url": ""})
    return tenders


# --- –°–∞–º—Ä—É–∫-–ö–∞–∑—ã–Ω–∞ ---
def parse_samruk():
    return []  # –û—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ì–æ—Å–∑–∞–∫—É–ø


# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤.\n\n"
        "–†–µ–≥–∏–æ–Ω: –ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –¢–æ–≤–∞—Ä—ã\n"
        "–¢–∏–ø: –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        "–°—É–º–º–∞: –¥–æ 1 000 000 —Ç–≥\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/goszakup ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å –ì–æ—Å–∑–∞–∫—É–ø"
    )


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
async def send_tenders(chat_id, tenders, site_name, bot):
    if not tenders:
        await bot.send_message(chat_id=chat_id, text=f"[{site_name}] –ù–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ—Ç.")
    else:
        for t in tenders:
            safe_title = escape(t["title"])
            safe_description = escape(t["description"])
            msg = (
                f"üîπ [{site_name}] <b>{safe_title}</b>\n"
                f"üìÑ {safe_description}\n"
                f"üî¢ –ö–æ–ª-–≤–æ: {t['quantity']}\n"
                f"üí∞ {t['price']}\n"
                f"üìç –°—Ç–∞—Ç—É—Å: {t['status']}\n"
                f"üîó <a href='{t['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
            )
            await bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML")


# --- /goszakup –∫–æ–º–∞–Ω–¥–∞ ---
async def goszakup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tenders = parse_goszakup()
    await send_tenders(chat_id, tenders, "–ì–æ—Å–∑–∞–∫—É–ø", context.bot)


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("goszakup", goszakup_command))

    app.run_polling()
