import logging
import requests
from bs4 import BeautifulSoup
from html import escape
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime, timedelta

TOKEN = "7008967829:AAHIcif9vD-j1gxYPGbQ5X7UY-0s2W3dqnk"

BASE_URL = (
    "https://goszakup.gov.kz/ru/search/lots?"
    "filter%5Bmethod%5D%5B%5D=3&"
    "filter%5Bstatus%5D%5B%5D=240&"
    "filter%5Bkato%5D=470000000&"
    "filter%5Bamount_to%5D=1000000&page="
)

DAYS_BACK = 5

def parse_goszakup():
    tenders = []
    now = datetime.now()

    for page in range(1, 3):  # –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        url = BASE_URL + str(page)
        try:
            resp = requests.get(url, timeout=10)
            resp.raise_for_status()
            soup = BeautifulSoup(resp.text, "html.parser")

            rows = soup.select("table.table tbody tr")
            if not rows:
                break

            for row in rows:
                cols = row.find_all("td")
                if len(cols) < 7:
                    continue

                link_tag = cols[1].find("a")
                if not link_tag:
                    continue

                title = link_tag.get_text(strip=True)
                link = "https://goszakup.gov.kz" + link_tag.get("href", "")

                date_created = None
                tooltip = link_tag.get("title", "")
                if "–°–æ–∑–¥–∞–Ω–æ:" in tooltip:
                    date_str = tooltip.split("–°–æ–∑–¥–∞–Ω–æ:")[-1].strip().split(" ")[0]
                    date_created = datetime.strptime(date_str, "%d.%m.%Y")
                    if (now - date_created).days > DAYS_BACK:
                        continue

                description = cols[2].get_text(strip=True)
                quantity = cols[3].get_text(strip=True)
                price = cols[4].get_text(strip=True)
                method = cols[5].get_text(strip=True)
                status = cols[6].get_text(strip=True)

                tenders.append({
                    "title": title,
                    "link": link,
                    "description": description,
                    "quantity": quantity,
                    "price": price,
                    "status": status
                })

        except Exception as e:
            tenders.append({
                "title": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ì–æ—Å–∑–∞–∫—É–ø: {e}",
                "link": "",
                "description": "",
                "quantity": "",
                "price": "",
                "status": ""
            })
            break

    return tenders

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä—é –ì–æ—Å–∑–∞–∫—É–ø—ã –ø–æ –ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–æ–º—É —Ä–µ–≥–∏–æ–Ω—É.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞:\n"
        "/goszakup ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π."
    )

async def goszakup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tenders = parse_goszakup()

    if not tenders or (len(tenders) == 1 and "–û—à–∏–±–∫–∞" in tenders[0]["title"]):
        await context.bot.send_message(chat_id=chat_id, text="[–ì–æ—Å–∑–∞–∫—É–ø] –ù–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ—Ç.")
        return

    for t in tenders:
        msg = (
            f"üîπ <b>{escape(t['title'])}</b>\n"
            f"<a href='{escape(t['link'])}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç</a>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {escape(t['description'])}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {escape(t['quantity'])}\n"
            f"–°—É–º–º–∞: {escape(t['price'])} —Ç–≥\n"
            f"–°—Ç–∞—Ç—É—Å: {escape(t['status'])}\n"
        )
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("goszakup", goszakup_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
