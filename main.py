import logging
import requests
from bs4 import BeautifulSoup
from html import escape
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "7008967829:AAHIcif9vD-j1gxYPGbQ5X7UY-0s2W3dqnk"

logging.basicConfig(level=logging.INFO)

def parse_goszakup():
    url = "https://goszakup.gov.kz/ru/announcements"
    tenders = []
    try:
        response = requests.get(url, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")

        rows = soup.select("table.table tbody tr")
        logging.info(f"–ù–∞—à–ª–∏ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: {len(rows)}")

        for row in rows:
            cols = row.find_all("td")
            if len(cols) < 7:
                continue
            name_html = cols[1].find("a")
            name = name_html.get_text(strip=True) if name_html else cols[1].get_text(strip=True)
            desc_html = cols[2].find("a")
            desc = desc_html.get_text(strip=True) if desc_html else cols[2].get_text(strip=True)
            quantity = cols[3].get_text(strip=True)
            price = cols[4].get_text(strip=True)
            purchase_method = cols[5].get_text(strip=True)
            status = cols[6].get_text(strip=True)
            # –î–ª—è –º–µ—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ ‚Äî –∑–¥–µ—Å—å –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É:
            place = ""
            # –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è
            if "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è" in desc:
                place = "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
            else:
                place = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            link = "https://goszakup.gov.kz" + (name_html['href'] if name_html else "")

            tenders.append({
                "name": name,
                "desc": desc,
                "quantity": quantity,
                "price": price,
                "purchase_method": purchase_method,
                "status": status,
                "place": place,
                "url": link
            })

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ì–æ—Å–∑–∞–∫—É–ø: {e}")
    return tenders

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/goszakup ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã —Å –ì–æ—Å–∑–∞–∫—É–ø"
    )

async def goszakup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tenders = parse_goszakup()
    if not tenders:
        await update.message.reply_text("[–ì–æ—Å–∑–∞–∫—É–ø] –ù–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ—Ç.")
        return

    await update.message.reply_text(f"[–ì–æ—Å–∑–∞–∫—É–ø] –ù–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(tenders)}")

    for tender in tenders[:10]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        msg = (
            f"üè∑ <b>{escape(tender['name'])}</b>\n"
            f"üìÑ {escape(tender['desc'])}\n"
            f"üì¶ –ö–æ–ª-–≤–æ: {escape(tender['quantity'])}\n"
            f"üí∞ –°—É–º–º–∞: {escape(tender['price'])}\n"
            f"‚öô –°–ø–æ—Å–æ–± –∑–∞–∫—É–ø–∫–∏: {escape(tender['purchase_method'])}\n"
            f"üìç –ú–µ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏: {escape(tender['place'])}\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: {escape(tender['status'])}\n"
            f"üîó <a href='{tender['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
        )
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML", disable_web_page_preview=True)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("goszakup", goszakup_command))
    app.run_polling()
